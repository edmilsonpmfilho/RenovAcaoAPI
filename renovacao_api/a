////ALUNO

// Rota para obter respostas para as mensagens do aluno
/* router.get("/mensagens-respostas/:matricula", (req, res) => {
  const matricula = req.params.matricula;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  db.query(
    "SELECT COUNT(*) AS count FROM mensagens m JOIN usuarios u ON m.remetente_id = u.id WHERE u.matricula = ?",
    [matricula],
    (err, countResult) => {
      if (err) {
        res.status(500).send(err);
        return;
      }

      const totalMessages = countResult[0].count;
      const totalPages = Math.ceil(totalMessages / limit);

      db.query(
        "SELECT m.id AS mensagem_id, m.mensagem, m.data_envio, r.resposta, r.data_resposta, u.nome AS remetente_nome " +
        "FROM mensagens m " +
        "LEFT JOIN respostas r ON m.id = r.mensagem_id " +
        "JOIN usuarios u ON m.remetente_id = u.id " +
        "WHERE u.matricula = ? " +
        "LIMIT ? OFFSET ?",
        [matricula, limit, offset],
        (err, result) => {
          if (err) {
            res.status(500).send(err);
            return;
          }
          res.send({ messages: result, totalPages });
        }
      );
    }
  );
});
router.get("/usuario/:matricula", (req, res) => {
  const matricula = req.params.matricula;

  db.query("SELECT id FROM usuarios WHERE matricula = ?", [matricula], (err, result) => {
    if (err) {
      res.status(500).send(err);
      return;
    }
    if (result.length > 0) {
      res.send(result[0]);
    } else {
      res.status(404).send({ msg: "Usuário não encontrado" });
    }
  });
});
// Rota para enviar mensagem
router.post("/mensagem", (req, res) => {
  const { remetente_id, destinatario_tipo, mensagem } = req.body;

  if (mensagem.length > 400) {
    res.status(400).send({ msg: "A mensagem não pode ter mais de 400 caracteres" });
    return;
  }

  db.query(
    "INSERT INTO mensagens (remetente_id, destinatario_tipo, mensagem) VALUES (?, ?, ?)",
    [remetente_id, destinatario_tipo, mensagem],
    (err, result) => {
      if (err) {
        res.status(500).send(err);
        return;
      }
      res.send({ msg: "Mensagem enviada com sucesso" });
    }
  );
}); */


///ADMIN
// Rota para obter mensagens por tipo de usuário com paginação
router.get("/mensagens/:tipoUsuario", (req, res) => {
  const tipoUsuario = req.params.tipoUsuario;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  if (!['administrador', 'psicologo'].includes(tipoUsuario)) {
    return res.status(400).send({ msg: "Tipo de usuário inválido" });
  }

  db.query(
    "SELECT COUNT(*) AS count FROM mensagens WHERE destinatario_tipo = ?",
    [tipoUsuario],
    (err, countResult) => {
      if (err) {
        console.error("Erro ao contar mensagens:", err);
        return res.status(500).send({ msg: "Erro ao contar mensagens" });
      }

      const totalMessages = countResult[0].count;
      const totalPages = Math.ceil(totalMessages / limit);

      db.query(
        "SELECT m.id, m.mensagem, m.data_envio, r.resposta, r.data_resposta, u.nome AS remetente_nome " +
        "FROM mensagens m " +
        "LEFT JOIN respostas r ON m.id = r.mensagem_id " +
        "JOIN usuarios u ON m.remetente_id = u.id " +
        "WHERE m.destinatario_tipo = ? " +
        "LIMIT ? OFFSET ?",
        [tipoUsuario, limit, offset],
        (err, result) => {
          if (err) {
            console.error("Erro ao buscar mensagens:", err);
            return res.status(500).send({ msg: "Erro ao buscar mensagens" });
          }
          res.send({ messages: result, totalPages });
        }
      );
    }
  );
});
// Rota para enviar uma resposta
router.post("/resposta", (req, res) => {
  const { mensagem_id, resposta, matricula, tipoUsuario } = req.body;

  if (!mensagem_id || !resposta || !matricula || !tipoUsuario) {
    console.error("Campos obrigatórios faltando:", { mensagem_id, resposta, matricula, tipoUsuario });
    return res.status(400).send({ msg: "Todos os campos são obrigatórios" });
  }

  let query;
  if (tipoUsuario === 'psicologo') {
    query = "INSERT INTO respostas (mensagem_id, resposta, matricula_psicologo) VALUES (?, ?, ?)";
  } else if (tipoUsuario === 'administrador') {
    query = "INSERT INTO respostas (mensagem_id, resposta, matricula_administrador) VALUES (?, ?, ?)";
  } else {
    console.error("Tipo de usuário inválido:", tipoUsuario);
    return res.status(400).send({ msg: "Tipo de usuário inválido" });
  }

  db.query(query, [mensagem_id, resposta, matricula], (err, result) => {
    if (err) {
      console.error("Erro ao enviar resposta:", err);
      return res.status(500).send({ msg: "Erro ao enviar resposta" });
    }

    // Verificar se a resposta foi inserida corretamente
    const insertId = result.insertId;
    if (!insertId) {
      console.error("Erro ao obter o ID inserido.");
      return res.status(500).send({ msg: "Erro ao enviar resposta" });
    }

    db.query(
      "SELECT data_resposta FROM respostas WHERE id = ?",
      [insertId],
      (err, data) => {
        if (err) {
          console.error("Erro ao recuperar data da resposta:", err);
          return res.status(500).send({ msg: "Erro ao recuperar data da resposta" });
        }

        if (data.length === 0) {
          console.error("Nenhuma data de resposta encontrada para o ID:", insertId);
          return res.status(500).send({ msg: "Erro ao recuperar data da resposta" });
        }

        res.send({
          msg: "Resposta enviada com sucesso",
          data_resposta: data[0].data_resposta,
          resposta: resposta
        });
      }
    );
  });
});

//////PSICO
// Rota para obter mensagens por tipo de usuário com paginação
router.get("/mensagens/:tipoUsuario", (req, res) => {
  const tipoUsuario = req.params.tipoUsuario;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  if (!['administrador', 'psicologo'].includes(tipoUsuario)) {
    return res.status(400).send({ msg: "Tipo de usuário inválido" });
  }

  db.query(
    "SELECT COUNT(*) AS count FROM mensagens WHERE destinatario_tipo = ?",
    [tipoUsuario],
    (err, countResult) => {
      if (err) {
        console.error("Erro ao contar mensagens:", err);
        return res.status(500).send({ msg: "Erro ao contar mensagens" });
      }

      const totalMessages = countResult[0].count;
      const totalPages = Math.ceil(totalMessages / limit);

      db.query(
        "SELECT m.id, m.mensagem, m.data_envio, r.resposta, r.data_resposta, u.nome AS remetente_nome " +
        "FROM mensagens m " +
        "LEFT JOIN respostas r ON m.id = r.mensagem_id " +
        "JOIN usuarios u ON m.remetente_id = u.id " +
        "WHERE m.destinatario_tipo = ? " +
        "LIMIT ? OFFSET ?",
        [tipoUsuario, limit, offset],
        (err, result) => {
          if (err) {
            console.error("Erro ao buscar mensagens:", err);
            return res.status(500).send({ msg: "Erro ao buscar mensagens" });
          }
          res.send({ messages: result, totalPages });
        }
      );
    }
  );
});
// Rota para enviar uma resposta
router.post("/resposta", (req, res) => {
  const { mensagem_id, resposta, matricula, tipoUsuario } = req.body;

  if (!mensagem_id || !resposta || !matricula || !tipoUsuario) {
    console.error("Campos obrigatórios faltando:", { mensagem_id, resposta, matricula, tipoUsuario });
    return res.status(400).send({ msg: "Todos os campos são obrigatórios" });
  }

  let query;
  if (tipoUsuario === 'psicologo') {
    query = "INSERT INTO respostas (mensagem_id, resposta, matricula_psicologo) VALUES (?, ?, ?)";
  } else if (tipoUsuario === 'administrador') {
    query = "INSERT INTO respostas (mensagem_id, resposta, matricula_administrador) VALUES (?, ?, ?)";
  } else {
    console.error("Tipo de usuário inválido:", tipoUsuario);
    return res.status(400).send({ msg: "Tipo de usuário inválido" });
  }

  db.query(query, [mensagem_id, resposta, matricula], (err, result) => {
    if (err) {
      console.error("Erro ao enviar resposta:", err);
      return res.status(500).send({ msg: "Erro ao enviar resposta" });
    }

    // Verificar se a resposta foi inserida corretamente
    const insertId = result.insertId;
    if (!insertId) {
      console.error("Erro ao obter o ID inserido.");
      return res.status(500).send({ msg: "Erro ao enviar resposta" });
    }

    db.query(
      "SELECT data_resposta FROM respostas WHERE id = ?",
      [insertId],
      (err, data) => {
        if (err) {
          console.error("Erro ao recuperar data da resposta:", err);
          return res.status(500).send({ msg: "Erro ao recuperar data da resposta" });
        }

        if (data.length === 0) {
          console.error("Nenhuma data de resposta encontrada para o ID:", insertId);
          return res.status(500).send({ msg: "Erro ao recuperar data da resposta" });
        }

        res.send({
          msg: "Resposta enviada com sucesso",
          data_resposta: data[0].data_resposta,
          resposta: resposta
        });
      }
    );
  });
});
